EXERCISE #1 -------------------------------------------------------------
This matlab code was generated on 9/5/23 using ChatGPT 3.5 with the prompt: 
"Pretend you are a computational neuroscientist modeling quanta release in the presynaptic terminal of a neuron. There are 10 quanta available for release, and the probability of release for each on is 0.2. Create matlab code to calculate the probability that 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, or 10 quanta will be released following a binomial distribution. "

% Parameters
num_trials = 10;      % Number of quanta available for release
probability = 0.2;    % Probability of release for each quantum

% Number of quanta to calculate probabilities for (0 to 10)
num_quanta = 0:10;

% Calculate the probabilities using the binomial distribution
probabilities = binopdf(num_quanta, num_trials, probability);

% Display the probabilities
for i = 1:numel(num_quanta)
    fprintf('Probability of %d quanta released: %.4f\n', num_quanta(i), probabilities(i));
end

Probability of 0 quanta released: 0.1074
Probability of 1 quanta released: 0.2684
Probability of 2 quanta released: 0.3020
Probability of 3 quanta released: 0.2013
Probability of 4 quanta released: 0.0881
Probability of 5 quanta released: 0.0264
Probability of 6 quanta released: 0.0055
Probability of 7 quanta released: 0.0008
Probability of 8 quanta released: 0.0001
Probability of 9 quanta released: 0.0000
Probability of 10 quanta released: 0.0000

EXERCISE #2 -------------------------------------------------------------
The probability of getting 8 quanta released if the release probability of each quanta is 0.1 is 0.0000. See below code used to calculate this. 
The probability of getting 8 quanta released if the release probability of each quanta is 0.7 is 0.1262. See below code used to calculate this. 
The highest likelihood to get 8 quanta released is 0.2066 generated from 0.6 release probability, so given the 8 quanta measurement it's most likely that the probability of release is 0.6.

This matlab code was generated on 9/5/23 using ChatGPT 3.5 with the prompts: 
"Pretend you are a computational neuroscientist modeling quanta release in the presynaptic terminal of a neuron. There are 14 quanta available for release, and the probability of release for each on is 0.2. Create matlab code to calculate the probability that 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, or 14 quanta will be released following a binomial distribution. "
"edit the code from the last prompt so that it checks release probabilities ranging from 0 to 1 in increments of 0.1."
"Output the above results in a table"

% Parameters
num_quanta = 14;  % Number of quanta available for release

% Create an array of release probabilities from 0 to 1 in increments of 0.1
release_probabilities = 0:0.1:1;

% Initialize arrays to store data
release_probs = [];
num_quanta_range = 0:num_quanta;
prob_matrix = zeros(length(release_probabilities), num_quanta + 1);

% Loop through release probabilities and calculate probabilities
for i = 1:length(release_probabilities)
    probability = release_probabilities(i);
    % Calculate the probabilities using the binomial distribution
    probabilities = binopdf(num_quanta_range, num_quanta, probability);
    prob_matrix(i, :) = probabilities;
    
    % Store the release probability in the array
    release_probs = [release_probs; probability];
end

% Create a table
T = table(release_probs, prob_matrix);

% Display the table
disp(T);

EXERCISE #3 -------------------------------------------------------------
Total likelihood
(prob of getting 8 given 0.1 release prob) 0.000 + (prob of getting 5 given 0.1 release prob) 0.0078 = 0.0078

Total log likelihood = log (0.000+0.0078) = -4.852

The maximum value is 1, 100% of datapoints should be 0 quanta released in the 0 release probability condition and 100% of datapoints should be 14 quanta released in the 1 release probability condition. 

Yes, computing the functions at a higher resoltion, that is, decreasing the step size between the release probabilities computed, will increase resolution and a more precise release probability can be calculated. To do this, change the release_probabilities = 0:0.1:1 line to something smaller like 0:0.05:1. 

Increasing the sample size will improve the estimate of the true release probability because you will get a larger, and therefore more accurate as long as it's truly random, sample of the population.

The following code generates graphs of the likelihood and log likelihood functions. It was generated by ChatGPT on 9/5/23 using the following prompts:
"Pretend you are a computational neuroscientist modeling quanta release in the presynaptic terminal of a neuron. There are 14 quanta available for release. Write matlab code to calculate the full likelihood functions using deciles of release probability between 0 to 1."
"Pretend you are a computational neuroscientist modeling quanta release in the presynaptic terminal of a neuron. There are 14 quanta available for release. Write matlab code to calculate the log likelihood functions using deciles of release probability between 0 to 1."

%% EXERCISE #3 full likelihood with graph ------------------

% Parameters
num_quanta = 14;  % Number of quanta available for release

% Create an array of deciles for release probabilities between 0 and 1
release_probabilities = 0:0.1:1;

% Initialize arrays to store data
likelihood_functions = zeros(length(release_probabilities), num_quanta + 1);
num_quanta_range = 0:num_quanta;

% Loop through release probabilities and calculate likelihood functions
for i = 1:length(release_probabilities)
    probability = release_probabilities(i);
    
    % Calculate the likelihood function using the binomial probability mass function
    likelihood = binopdf(num_quanta_range, num_quanta, probability);
    likelihood_functions(i, :) = likelihood;
end

% Display the likelihood functions
figure;
imagesc(num_quanta_range, release_probabilities, likelihood_functions');
xlabel('Number of Quanta Released');
ylabel('Release Probability');
title('Likelihood Functions');
colorbar;

%% EXERCISE #3 log likelihood with graph --------------
% Parameters
num_quanta = 14;  % Number of quanta available for release

% Create an array of deciles for release probabilities between 0 and 1
release_probabilities = 0:0.1:1;

% Initialize arrays to store data
log_likelihood_functions = zeros(length(release_probabilities), num_quanta + 1);
num_quanta_range = 0:num_quanta;

% Loop through release probabilities and calculate log likelihood functions
for i = 1:length(release_probabilities)
    probability = release_probabilities(i);
    
    % Calculate the log likelihood function using the binomial probability mass function
    log_likelihood = log(binopdf(num_quanta_range, num_quanta, probability));
    log_likelihood_functions(i, :) = log_likelihood;
end

% Display the log likelihood functions
figure;
imagesc(num_quanta_range, release_probabilities, log_likelihood_functions');
xlabel('Number of Quanta Released');
ylabel('Release Probability');
title('Log Likelihood Functions');
colorbar;

EXERCISE #4 -------------------------------------------------------------
The release probability is most likely 0.4 because 6 was the most observed quantal release and at a 0.4 release probability you are most likely to observe a quantal release of 6. I estimated this from the table in Part 2, but could probably get a more precise answer given smaller windows or a fitting algorithm.

EXERCISE #5 -------------------------------------------------------------
The Maximum-Likelihood Estimate (p-hat) for the population is 2.1000.

You can't calculate a p-value without two populations to compare, and we only know that the probability of release before the temp change is 0.3 and not what it is after. 
You could simulate a second population with an arbitrarily chosen probability of release, but the p value would depend on what you choose. 
In short, the point is that a frequentist approach will just be able to reject or not reject the null, rather than telling you the probability that temperature has an effect. 
That is, if there is a .05 chance that you would get that data given the null hypothesis is true, then you can conclude that temperature most likely doesn't have no effect. 

This code was generated using ChatGPT 3.5 on 9/5/23 using the prompt:
"Pretend you are a computational neuroscientist modeling quanta release in the presynaptic terminal of a neuron. There are 14 quanta available for release, and the release probability of each one is 0.3. For a single quantal event, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, or 14 of these quanta could be released. You measure 7 quantal events for these same 14 quanta available for release. Write matlab code to compute p-hat, the maximum-likelihood estimate in the population given our sample. "

% Parameters
num_quanta = 14;            % Number of quanta available for release
probability_per_quantum = 0.3; % Release probability for each quantum
num_events = 7;             % Number of observed quantal events

% Calculate p-hat (MLE) for a single quantal event
p_single_event = probability_per_quantum;

% Calculate p-hat (MLE) for the population of 7 quantal events
p_hat_population = p_single_event * num_events;

% Display the result
fprintf('Maximum-Likelihood Estimate (p-hat) for the population: %.4f\n', p_hat_population);
